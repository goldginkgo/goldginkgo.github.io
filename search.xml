<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Setup Kubernetes with kubeadm in CentOS VMs]]></title>
    <url>%2F2018%2F11%2F03%2FSetup-K8S-with-kubeadm-in-CentOS-VMs%2F</url>
    <content type="text"><![CDATA[Here is a guide on how to setup Kubernetes on two CentOS 7 VMs (master and node). Stop firewall/selinux (both)1sed -i &apos;s/SELINUX=enforcing/SELINUX=disabled/g&apos; /etc/selinux/config Ensure swap is off (both)Add comment in fstab1#/dev/mapper/centos-swap swap swap defaults 0 0 Execute swapoff -a. Enable IP forwarding or iptables. (both)12345cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsysctl --system Install Docker (both)Reference: https://docs.docker.com/install/linux/docker-ce/centos/12345# sudo yum install -y yum-utils device-mapper-persistent-data lvm2# sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo# sudo yum install -y docker-ce# sudo systemctl start docker# sudo systemctl enable docker Installing kubeadm, kubelet and kubectl (both)Reference: https://kubernetes.io/docs/setup/independent/install-kubeadm/12345678910111213cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpgexclude=kube*EOFsetenforce 0yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetessystemctl enable kubelet &amp;&amp; systemctl start kubelet Initializing master node (master)1234567kubeadm initmkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/configexport KUBECONFIG=/etc/kubernetes/admin.conf Installing a pod network add-on (master) (Wave Net)123sysctl net.bridge.bridge-nf-call-iptables=1kubectl apply -f &quot;https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d &apos;\n&apos;)&quot;kubectl get pods --all-namespaces Joining your nodes(node)1kubeadm join &lt;master-ip&gt;:6443 --token zt5yjr.zutab0w4uczftlm8 --discovery-token-ca-cert-hash sha256:a34dc33567e0e169cdc0366303fb409d030dfd01602973ae482e9ef4969f2962 Dashboard (master)1kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml storage (master). Rook123456$ kubectl apply -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/kubernetes/ceph/operator.yaml$ kubectl apply -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/kubernetes/ceph/cluster.yaml$ kubectl get pods -n rook-ceph-system$ kubectl get pods -n rook-ceph Deploy first app12345678910111213141516171819202122# vi nginx-deployment.yamlapiVersion: apps/v1kind: Deploymentmetadata: name: nginx-deploymentspec: selector: matchLabels: app: nginx replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.7.9 ports: - containerPort: 80# kubectl create -f nginx-deployment.yaml# kubectl get pods Expose a service12# kubectl expose deployment nginx-deployment --type=LoadBalancer# kubectl get services]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Setup Kuberntes using minikube on MacOS]]></title>
    <url>%2F2018%2F11%2F01%2FSetup-kuberntes-using-minikube-on-MacOS%2F</url>
    <content type="text"><![CDATA[Here is guide on how to setup Kubernetes 1.12 using minikube 0.30 on MacOS. Setup ShadowsocksSetup shadowsocks, change shadowsocks “HTTP proxy listen ip” to local ip. e.g 192.168.1.107. Use ‘ipconfig getifaddr en0’ command to check IP. Set proxy in terminalOpen terminal, set proxy.1export http_proxy=http://192.168.1.107:1087;export https_proxy=http://192.168.1.107:1087;export no_proxy=localhost,127.0.0.0/8,192.0.0.0/8; Install and start dockerSetup minikubeExecute following command to setup minikube.1minikube start --vm-driver=hyperkit --kubernetes-version v1.12.1 --docker-env HTTP_PROXY=http://192.168.1.107:1087 --docker-env HTTPS_PROXY=http://192.168.1.107:1087 --docker-env NO_PROXY=localhost,127.0.0.0/8,192.0.0.0/8; Commands for debuggingHere are a list of commands that maybe useful for debugging the setup if error occurs.123456minikube sshdocker ps -adocker logs &lt;container&gt;kubectl get pods --all-namespaceskubectl logs -n kube-system &lt;pod&gt; Open dashboardOpen Kubenetes dashboard using minikube dashboard command. CleanupIf you want to delete minikube and Kubernetes, use following command.1minikube stop &amp;&amp; minikube delete &amp;&amp; rm -rf ~/.minikube ~/.kube]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to Use Cloud Foundry Services From outside the Cloud Envivonment]]></title>
    <url>%2F2018%2F08%2F17%2FHow-to-Use-Cloud-Foundry-Services-From-outside-the-Cloud-Envivonment%2F</url>
    <content type="text"><![CDATA[Based on NGINX buildpack and TCP routing feature in Cloud Foundry, we can implement an NGINX app on cloud foundry which acts as a reverse proxy for Cloud Foundry services. By accessing the app, we will be able to use Cloud Foundry services (RabbitMQ, Redis, …) from outside Cloud Foundry.Let’s take RabbitMQ/AMQP protocol for example, here are the steps: Add RadditMQ service in Cloud FoundryLogin to your org and space in Cloud Foundry, add a RabbitMQ service instance. Create TCP routeCreate a TCP route with the following command, and get TCP port information using “cf routes” command.1cf create-route &lt;space-name&gt; tcp1.&lt;cloud-foundry-domain&gt; --random-port Configure nginx.confCreate a directory on your laptop. Create nginx.conf file in the directory with following contents.1234567891011121314&#123;&#123;module &quot;ngx_stream_module&quot;&#125;&#125;worker_processes 1;daemon off; error_log stderr;events &#123; worker_connections 1024; &#125; stream &#123; server &#123; listen &#123;&#123;port&#125;&#125;; proxy_pass &#123;&#123;env &quot;RHOST&quot;&#125;&#125;:5672; &#125;&#125; Create app’s manifestCreate manifest.yml file in the directory with the following content. Replace the values with actual ones. Just replace with 127.0.0.1 if you don’t have the IP/FQDN for RabbitMQ.12345678910---applications:- name: &lt;app-name&gt; buildpack: https://github.com/cloudfoundry/nginx-buildpack.git routes: - route: tcp1.&lt;region&gt;.bosch-iot-cloud.com:&lt;tcp-port&gt; env: RHOST: &lt;rabbitmq-host-url&gt; services: - &lt;rabbitmq-service-name&gt; Push app1cf push Change RabbitMQ setting in manifest.ymlGet RabbitMQ hostname from apps manager UI and change “RHOST” with actual value in manifest.yml and execute “cf push” again. Skip this if you already entered the right value in step 4. Whitelist the routeWhitelist the TCP route for you app to use if necessary. Now you can develop apps which will be deployed outside Cloud Foundry to use RabbitMQ service in Cloud Foundry. Just get RabbitMQ connection information from Cloud Foundry, and replace RabbitMQ hostname and port with your NGINX app’s tcp route. However, normally this is not allowed as we may have security concerns on using service outside Cloud Foundry.]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>Cloud Foundry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Setup Concourse in Ubuntu from scratch with Proxy]]></title>
    <url>%2F2018%2F07%2F03%2FSetup-Concourse-in-Ubuntu-from-scratch-with-Proxy%2F</url>
    <content type="text"><![CDATA[Concourse is a greate tool for CI/CD.Here is a guide to setup Concourse on Ubuntu 18.04 from scratch in Corporate environment. Install Ubuntu 18.04.Check DNS and hostname12345$ sudo vim /etc/resolv.confnameserver &lt;dns-server&gt;$ sudo vi /etc/hosts127.0.0.1 localhost.localdomain localhost frankvm Install cntlm12345678910111213141516171819202122232425262728293031Set temporary proxy in following file for installing cntlm$ sudo touch /etc/apt/apt.conf.d/proxy.conf$ sudo vi /etc/apt/apt.conf.d/proxy.confAcquire::http::Proxy &quot;http://dfr1szh:&lt;password&gt;@rb-proxy-apac.bosch.com:8080/&quot;;Acquire::https::Proxy &quot;https://dfr1szh:&lt;password&gt;@rb-proxy-apac.bosch.com:8080/&quot;;Enable universe repository so that we can install cntlm.$ sudo add-apt-repository universecheck repository$ apt policy$ cat /etc/apt/sources.listinstall cntlm$ sudo apt-get install cntlmcntlm configuration$ cntlm -u &lt;user&gt; -d &lt;domain&gt; -HPassNTLMv2 67DB3F227E0A9136A7C5D8D0532A1AAB$ sudo vim /etc/cntlm.confUsername &lt;user&gt;Domain &lt;domain&gt;#Password passwordPassNTLMv2 67DB3F227E0A9136A7C5D8D0532A0AABProxy &lt;proxy-ip&gt;:8080NoProxy localhost, 127.0.0.*, 10.*, 192.168.*Listen &lt;local-ip&gt;:3128$ sudo systemctl restart cntlm Set proxyreplace with actual ip 1234567891011121314$ sudo vi /etc/environmenthttp_proxy=http://&lt;local-ip&gt;:3128/ftp_proxy=http://&lt;local-ip&gt;:3128/socks_proxy=socks://&lt;local-ip&gt;:3128/https_proxy=http://&lt;local-ip&gt;:3128/no_proxy=127.0.0.1,localhost,10.*,192.168.*,*.bosch.com$ source /etc/environment$ sudo vi /etc/apt/apt.conf.d/proxy.confAcquire::http::proxy &quot;http://&lt;local-ip&gt;:3128/&quot;;Acquire::https::proxy &quot;http://&lt;local-ip&gt;:3128/&quot;;reboot if necessary Install Dockerhttps://docs.docker.com/install/linux/docker-ce/ubuntu/ https://docs.docker.com/install/linux/linux-postinstall/#next-steps https://docs.docker.com/config/daemon/systemd/#httphttps-proxy 12345sudo vi /etc/systemd/system/docker.service.d/http-proxy.conf[Service]Environment=&quot;HTTP_PROXY=http://&lt;local-ip&gt;:3128/&quot;Environment=&quot;HTTPS_PROXY=http://&lt;local-ip&gt;:3128/&quot;Environment=&quot;NO_PROXY=localhost,127.0.0.*,10.*,192.168.*,*.bosch.com&quot; Install certificatesWhen using tools like wget or docker to download HTTPS secured content, need to install trusted self-signed proxy certs.12Extract certs to /usr/local/share/ca-certificates$ sudo update-ca-certificates Install Docker ComposeInstall Ruby(not relevant) Install Concourse123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051$ git clone https://github.com/concourse/concourse-docker.git &amp;&amp; cd concourse-docker$ sudo ./generate-keys.sh$ cat docker-compose-quickstart.ymlversion: &apos;3&apos;services: concourse-db: image: postgres environment: - POSTGRES_DB=concourse - POSTGRES_PASSWORD=concourse_pass - POSTGRES_USER=concourse_user - PGDATA=/database concourse-web: image: concourse/concourse:4.2.1 command: web links: [concourse-db] depends_on: [concourse-db] ports: [&quot;8080:8080&quot;] volumes: [&quot;./keys/web:/concourse-keys&quot;] environment: - CONCOURSE_POSTGRES_HOST=concourse-db - CONCOURSE_POSTGRES_USER=concourse_user - CONCOURSE_POSTGRES_PASSWORD=concourse_pass - CONCOURSE_POSTGRES_DATABASE=concourse - CONCOURSE_EXTERNAL_URL=http://&lt;local-ip&gt;:8080 - CONCOURSE_ADD_LOCAL_USER=test:$$2a$$10$$0W9/ilCpYXY/yCPpaOD.6eCrGda/fnH3D4lhsw1Mze0WTID5BuiTW - CONCOURSE_MAIN_TEAM_ALLOW_ALL_USERS=true - http_proxy=http://&lt;local-ip&gt;:3128 - https_proxy=http://&lt;local-ip&gt;:3128 - no_proxy=127.0.0.1,localhost,10.*,192.168.* concourse-worker: image: concourse/concourse:4.2.1 command: worker privileged: true links: [concourse-web] depends_on: [concourse-web] volumes: [&quot;./keys/worker:/concourse-keys&quot;] environment: - CONCOURSE_TSA_HOST=concourse-web:2222 - CONCOURSE_GARDEN_NETWORK - http_proxy=http://&lt;local-ip&gt;:3128 - https_proxy=http://&lt;local-ip&gt;:3128 - no_proxy=127.0.0.1,localhost,10.*,192.168.*$ docker-compose up -d$ sudo curl -L &quot;https://github.com/concourse/concourse/releases/download/v4.2.1/fly_linux_amd64&quot; -o /usr/local/bin/fly$ sudo chmod +x /usr/local/bin/fly]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Concourse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to find apps with high CPU usage for a Diego cell VM.]]></title>
    <url>%2F2018%2F06%2F30%2FHow-to-find-apps-with-high-CPU-usage-for-a-Diego-cell-VM%2F</url>
    <content type="text"><![CDATA[According to Understanding Container Security, each container in Cloud Foundry use a fair share of CPU relative to the other containers. However, an app container can use much higher CPU resources when other containers in the same Diego Cell VM are idle if we don’t set limitation for CPU usage of app containsers.It would be rather difficult to figure out the apps that is causing the trouble if we don’t have application level monitoring. One way to achieve our goal is to use Cloud Foundry top plugin. But here I also want to show the procedures on how to do it manually. Before we actually start, I want to give some steps on how to find the Diego Cell VM information based on an application instace. Mapping of Diego Cell and Cloud Foundry appsGet mapping information of Diego Cell and Cloud Foundry appscf login to your org and space, use commands below to get IP address of the cell. CPU and Memory usage is also shown in this command.123456789101112131415161718192021222324252627$ cf app web-app-bb --guidc07cf94e-3c43-41b6-9e1b-e77231fa2058$ cf curl /v2/apps/c07cf94e-3c43-41b6-9e1b-e77231fa2058/stats&#123; &quot;0&quot;: &#123; &quot;state&quot;: &quot;RUNNING&quot;, &quot;isolation_segment&quot;: null, &quot;stats&quot;: &#123; &quot;name&quot;: &quot;web-app-bb&quot;, &quot;uris&quot;: [ &quot;web-app-bb.apps.&lt;url&gt;&quot; ], &quot;host&quot;: &quot;10.48.16.166&quot;, &quot;port&quot;: 61001, &quot;uptime&quot;: 114, &quot;mem_quota&quot;: 67108864, &quot;disk_quota&quot;: 1073741824, &quot;fds_quota&quot;: 16384, &quot;usage&quot;: &#123; &quot;time&quot;: &quot;2018-12-02T08:25:52+00:00&quot;, &quot;cpu&quot;: 0.0036034101653391625, &quot;mem&quot;: 16740352, &quot;disk&quot;: 185126912 &#125; &#125; &#125;&#125; SSH to Diego cell VMLogin to Bosh, and execute the following command to ssh to the Diego cell VM.1234$ bosh -e pcf log-in$ bosh -e pcf -d cf-c16bf7a74c8a95e1e6eb vms | grep 10.48.16.166diego_cell/9dd712e7-31d2-4d44-845f-91bd7495e9bd running PCF-QA-AZ3 10.48.16.166 vm-dd56c1cc-1edf-44a7-81ff-6ce22a32d9dc ert.custom2 -$ bosh -e pcf -d cf-c16bf7a74c8a95e1e6eb ssh diego_cell/9dd712e7-31d2-4d44-845f-91bd7495e9bd Now let’s go on with the steps to find applications based on the Deigo cell VM. Find applications on a Deigo cell VMCheck stats on Diego cellLogin to Diego cell VM and check the stats on the VM. You will get resulst like following, first half of process_guid is the actuall App GUID.12345678910111213141516171819202122232425262728diego_cell/9dd712e7-31d2-4d44-845f-91bd7495e9bd:~$ cd /var/vcap/jobs/rep/config/certs; curl -k -s https://localhost:1801/state --cert server.crt --key server.key | python -m json.tool&#123; &quot;AvailableResources&quot;: &#123; &quot;Containers&quot;: 236, &quot;DiskMB&quot;: 173866, &quot;MemoryMB&quot;: 52485 &#125;, &quot;Evacuating&quot;: false, &quot;LRPs&quot;: [ &#123; &quot;DiskMB&quot;: 1024, &quot;MaxPids&quot;: 0, &quot;MemoryMB&quot;: 1024, &quot;PlacementTags&quot;: null, &quot;RootFs&quot;: &quot;preloaded:cflinuxfs2&quot;, &quot;VolumeDrivers&quot;: [], &quot;domain&quot;: &quot;cf-apps&quot;, &quot;index&quot;: 0, &quot;instance_guid&quot;: &quot;30525d4f-81ab-4cf3-7c61-bb6f&quot;, &quot;process_guid&quot;: &quot;75a52aba-3eab-429a-ad6f-160619241e2d-55c2deda-cf67-4d2b-9f1c-8daf2bbeeea0&quot; &#125;,... &quot;TotalResources&quot;: &#123; &quot;Containers&quot;: 249, &quot;DiskMB&quot;: 184938, &quot;MemoryMB&quot;: 64429 &#125;,... Get all app GUIDs on Diego cell1234567891011121314diego_cell/9dd712e7-31d2-4d44-845f-91bd7495e9bd:/var/vcap/jobs/rep/config/certs$ cd /var/vcap/jobs/rep/config/certs; curl -k -s https://localhost:1801/state --cert server.crt --key server.key | python -m json.tool | grep &quot;process_guid&quot; |cut -d &apos;:&apos; -f2|cut -c 3-38c07cf94e-3c43-41b6-9e1b-e77231fa2058656cd296-b2f4-4c4d-a82d-8079763d3e8a5f159b3d-6e61-4d00-9fca-deee3f035c5740b135af-c7c7-4ebd-af2e-984b2b5ce262382ce123-c13c-472f-ab74-5265dc9847142044e186-63bd-494e-8559-e28fd3e35e280409effc-f11a-4dc7-a6e4-15282e234a53fcf52090-7c8a-45db-90f6-29f25fa0be53048b4d26-4652-4c85-8015-4bb2be42aeff8e3ba265-a0df-4b07-a34a-aaea3158e09075a52aba-3eab-429a-ad6f-160619241e2dd048268a-e60b-481a-a5cc-ff39fdbf1eb2e7428432-b459-4111-b813-4fb6dfc7884f Get apps with CPU infoLogin to Cloud Foundry with admin account and using following shell script to get apps names. app_guids is a file with contents from previous step.1234567filename=&quot;app_guids&quot;cat $filename | while read LINEdo echo $LINE cf curl /v2/apps/$LINE | grep &quot;\&quot;name\&quot;:&quot; cf curl /v2/apps/$LINE | grep &quot;\&quot;cpu\&quot;:&quot;done Here is a sample result:1234567891011121314151617$ sh scriptc07cf94e-3c43-41b6-9e1b-e77231fa2058 &quot;name&quot;: &quot;web-app-bb&quot;, &quot;cpu&quot;: 0.0026490531155109625,656cd296-b2f4-4c4d-a82d-8079763d3e8a &quot;name&quot;: &quot;connection-test&quot;, &quot;cpu&quot;: 0.0008588435074484718, &quot;cpu&quot;: 0.0009525608833325616,0409effc-f11a-4dc7-a6e4-15282e234a53 &quot;name&quot;: &quot;apps-manager-js-blue&quot;, &quot;cpu&quot;: 7.13585021377469e-06, &quot;cpu&quot;: 8.020481371308023e-06, &quot;cpu&quot;: 7.091829884025554e-06, &quot;cpu&quot;: 0.0, &quot;cpu&quot;: 0.0, &quot;cpu&quot;: 0.0,...]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>Cloud Foundry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Workflow in Gitlab]]></title>
    <url>%2F2018%2F05%2F20%2Fgit-workflow%2F</url>
    <content type="text"><![CDATA[A Git Workflow is a recipe or recommendation for how to use Git to accomplish work in a consistent and productive manner. There are different kinds of Git workflows. But here we suggest the following Git workflow to be used. In the future, we will move towards trunk based development. Clone a repository12git clone https://&lt;url&gt;.gitcd &lt;project-name&gt; Create a branch123456git checkout -b &lt;branch-name&gt;create a feature branch: git checkout -b feature/&lt;name&gt;create a bug-fix branch: git checkout -b bug/&lt;name&gt;create a release branch: git checkout -b release/1.0create a bug-fix branch from a release branch: git checkout -b release/1.0 release/1.0/&lt;name&gt;create branch from a tag: git checkout -b &lt;Hotfix branch&gt; &lt;TAG&gt; Commit to local branchAfter code development in our local machine, do proper testing and commit changes to our local branchA guideline to commit messages 123456git statusgit add .git commit -m &quot;&lt;commit-message&gt;&quot;Undo a change: https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git/change a commit message https://help.github.com/articles/changing-a-commit-message/ Rebase new branch with masterhttps://docs.gitlab.com/ee/university/training/topics/merge_conflicts.html)1234567git checkout mastergit pull origin mastergit checkout &lt;branch-name&gt;git rebase masterIf there are conflicts, fix conflicts in the files.git add .git rebase --continue Push local branch to remote repository1git push origin &lt;branch-name&gt; Create a merge request on master branchReview the commit and merge the code if it’s okIf testing for master branch fails, go back to step 3. Create tags and releasesFuture ReadingGitflow model Comparing Workflows What is Trunk-Based Development? Trunk based development Trunk-based Development vs. Git Flow]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Setup Shadowsocks to Visit Google in China]]></title>
    <url>%2F2018%2F02%2F08%2Fshadowsocks%2F</url>
    <content type="text"><![CDATA[Here is a guilde on how to setup Shadowssocks to visit blocked websites like Google in China. Register for a VPS providerI will take Vultr for example. Upload your SSH key to VultrAn SSH Key allows you to log into your server without needing a password. SSH Keys can be automatically added to servers during the installation process. Create a Ubuntu 18.04 VMCreate a Ubuntu 18.04 VM in your VPS with your SSH key specified, and set location to places where have access to Google. (e.g. Los Angeles) Disable ssh timeout.Install shadowsocks service on VPS hostExecute the following script, or add this script as startup script when creating the vm. Logs for shadowsocks are in /var/log/shadowsocks.log.12345678910111213141516171819202122232425262728293031323334#!/bin/sh# Deploy Ubuntu 18.04 VM#echo -e "ClientAliveInterval 600\nTCPKeepAlive yes\nClientAliveCountMax 10" &gt;&gt; /etc/ssh/sshd_configapt-get updateapt-get install python-pip -yapt-get install -y python-setuptoolspip install git+https://github.com/shadowsocks/shadowsocks.git@master#pip install shadowsockssudo ufw disableIP=$(hostname -I)cat &gt; /etc/shadowsocks.json &lt;&lt;EOF&#123; "server": "$IP", "server_port": "8899", "local_address": "127.0.0.1", "local_port": 1080, "password": "asdf_1234", "timeout": 300, "method": "aes-256-cfb", "fast_open": true&#125;EOF# TCP BBRecho "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.confecho "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.confsysctl -psysctl net.ipv4.tcp_available_congestion_controlssserver -c /etc/shadowsocks.json -d start Setup client on your laptopDownload MacOS Client, install, and enter server IP, port, password information in client. Change shadowsocks “HTTP proxy listen ip” to local ip. e.g 192.168.1.107. use ‘ipconfig getifaddr en0’ command to get IP. Use shadowsocks proxy in command line1export http_proxy=http://192.168.1.107:1087;export https_proxy=http://192.168.1.107:1087;export no_proxy=localhost,127.0.0.0/8,192.0.0.0/8; Reference: A Chinese Guide shadowsocks Official Website shadowsocks Github shadowsocks wiki]]></content>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to Set up a Blog With Hexo and Github Pages]]></title>
    <url>%2F2017%2F04%2F04%2Fset-up-blog%2F</url>
    <content type="text"><![CDATA[Here are a list of tutorials which I referred to when setting up my blog.HexoNexT]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Basics]]></title>
    <url>%2F2017%2F03%2F24%2Fgit-basics%2F</url>
    <content type="text"><![CDATA[What is Git?Distributed version control system and source code management system.Git can keep track of changes. GIT vs SVN?SVN uses a central server to store all files and enables team collaboration.If the central server goes down, no one can collaborate at all. Git checkout fully mirror the repository.If the server goes down, then the repository from any client can be copied back to the server to restore it. And we can perform many operations when you are offline. Advantages of GIT?Free and open sourceFast and small ( most of the operations are performed locally)Implicit backup ( Data on any client side mirrors the repository)Easier branching (CVCS will copy all the codes to the new branch, so it is time-consuming) How can conflict in git resolved?To resolve the conflict in git, edit the files to fix the conflicting changes and then add the resolved files by running “git add” after that to commit the repaired merge, run “git commit”. Git remembers that you are in the middle of a merger, so it sets the parents of the commit correctly. What is git rebase and how can it be used to resolve conflicts in a feature branch before merge?In simple words, git rebase allows one to move the first commit of a branch to a new starting location. For example, if a feature branch was created from master, and since then the master branch has received new commits, git rebase can be used to move the feature branch to the top of master. The command effectively will replay the changes made in the feature branch at the top of master, allowing conflicts to be resolved in the process. When done with care, this will allow the feature branch to be merged into master with relative ease and sometimes as a simple fast-forward operation. Git workflow (the following may not fully correct)clone the Git repository as a working copymodify the working copy by adding/editing filesupdate the working copy by taking other developer’s changesreview the changes before commit.commit changes. If everything is fine, then you push the changes to the repositoryif you realize something is wrong, then you correct the last commit and push the changes to the repository Create a branch of Master Work Merge it back to Master when done Working Directory -&gt; Staging Area -&gt; Repository12345678910git initgit status(inspects the contents of the working directory and staging area)git add file1 file2git add -Agit diff( shows differences between the working directory and the staging area)git diff --staged( Shows the changes between HEAD (latest commit on current branch) and staging directory)git diff HEAD(Shows the deltas between HEAD and working dir )git commit -m &quot;&quot;git loggit show HEAD backtrack in Git12345git checkout HEAD filename (Discards changes in the working directory.)git reset HEAD filename (Unstages file changes in the staging area.)git reset commit_SHA (reset to a previous commit in your commit history.)git revert HEADgit commit --amend Git branch1234567git branchgit branch branch-namegit checkout branch-namegit checkout -b branch_namegit merge branch-namegit branch -d branch_namegit rebase Git teamworkA remote is a shared Git repository that allows multiple collaborators to work on the same Git project from different locations.12345git clone remote_location clone_namegit remote -vgit fetchgit merge orgin/mastergit push origin your_branch_name Top 45 GIT Interview Questions &amp; Answers Git 使用规范流程]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F03%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
