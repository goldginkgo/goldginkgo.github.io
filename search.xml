<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[How to Set up a Blog With Hexo and Github Pages]]></title>
    <url>%2F2017%2F04%2F04%2Fset-up-blog%2F</url>
    <content type="text"><![CDATA[Here are a list of tutorials which I referred to when setting up my blog.HexoNexTMac上搭建基于GitHub Page的Hexo博客Hexo站点、NexT主题修改全记录]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Basics]]></title>
    <url>%2F2017%2F03%2F24%2Fgit-basics%2F</url>
    <content type="text"><![CDATA[What is Git?Distributed version control system and source code management system.Git can keep track of changes. GIT vs SVN?SVN uses a central server to store all files and enables team collaboration.If the central server goes down, no one can collaborate at all. Git checkout fully mirror the repository.If the server goes down, then the repository from any client can be copied back to the server to restore it. And we can perform many operations when you are offline. Advantages of GIT?Free and open sourceFast and small ( most of the operations are performed locally)Implicit backup ( Data on any client side mirrors the repository)Easier branching (CVCS will copy all the codes to the new branch, so it is time-consuming) How can conflict in git resolved?To resolve the conflict in git, edit the files to fix the conflicting changes and then add the resolved files by running “git add” after that to commit the repaired merge, run “git commit”. Git remembers that you are in the middle of a merger, so it sets the parents of the commit correctly. What is git rebase and how can it be used to resolve conflicts in a feature branch before merge?In simple words, git rebase allows one to move the first commit of a branch to a new starting location. For example, if a feature branch was created from master, and since then the master branch has received new commits, git rebase can be used to move the feature branch to the top of master. The command effectively will replay the changes made in the feature branch at the top of master, allowing conflicts to be resolved in the process. When done with care, this will allow the feature branch to be merged into master with relative ease and sometimes as a simple fast-forward operation. Git workflow (the following may not fully correct)clone the Git repository as a working copymodify the working copy by adding/editing filesupdate the working copy by taking other developer’s changesreview the changes before commit.commit changes. If everything is fine, then you push the changes to the repositoryif you realize something is wrong, then you correct the last commit and push the changes to the repository Create a branch of Master Work Merge it back to Master when done Working Directory -&gt; Staging Area -&gt; Repository git initgit status(inspects the contents of the working directory and staging area)git add file1 file2git add -Agit diff( shows differences between the working directory and the staging area)git diff –staged( Shows the changes between HEAD (latest commit on current branch) and staging directory)git diff HEAD(Shows the deltas between HEAD and working dir )git commit -m “”git loggit show HEAD backtrack in Gitgit checkout HEAD filename (Discards changes in the working directory.)git reset HEAD filename (Unstages file changes in the staging area.)git reset commit_SHA (reset to a previous commit in your commit history.)git revert HEADgit commit –amend Git branchgit branchgit branch branch-namegit checkout branch-namegit checkout -b branch_namegit merge branch-namegit branch -d branch_namegit rebase Git teamworkA remote is a shared Git repository that allows multiple collaborators to work on the same Git project from different locations.git clone remote_location clone_namegit remote -vgit fetchgit merge orgin/mastergit push origin your_branch_name Top 45 GIT Interview Questions &amp; AnswersGit 使用规范流程]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F03%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
